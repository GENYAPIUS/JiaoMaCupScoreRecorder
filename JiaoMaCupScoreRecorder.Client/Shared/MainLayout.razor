@implements IDisposable
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JiaoMaCupScoreRecorder.Client.StateContainer
@using JiaoMaCupScoreRecorder.Client.Utils
@using JiaoMaCupScoreRecorder.Client.Models
@using JiaoMaCupScoreRecorder.Client.Const
@inherits LayoutComponentBase
@inject IJSRuntime _js;
@inject StateContainer _stateContainer;
@inject IWebAssemblyHostEnvironment _hostEnvironment;

<div class="page">
    <div class="toast" style="background-color: rgba(0, 0, 0, 0.7); height: 100vh; position: fixed; width: 100vw; z-index: 2;" data-bs-autohide="false">
        <div class="toast position-fixed toast-error-message" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
            <div class="toast-header d-flex" style="color: red; font-size: 2vh; height: 5vh; justify-content: space-between;">
                <span>錯誤訊息</span>
                <div>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aira-label="close" onclick="closeToast()"></button>
                </div>
            </div>
            <div class="toast-body" style="align-items: center; color: red; display: flex; font-size: 50px; height: 100%; justify-content: center; width: 100%;">有重複的圖片</div>
        </div>
    </div>

    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row">
            <div>
                目前環境：@_currentEnvironment
            </div>
            <div>
                @if (!_stateContainer.IsGoogleLoggedIn)
                {
                    <button class="btn btn-primary" id="authorize_button" @onclick="OnAuthorizeClick">Authorize</button>
                }
                else if (_stateContainer.IsGoogleLoggedIn)
                {
                    <button class="btn btn-primary" id="signout_button" @onclick="OnSignOutClick">Sign Out</button>
                    <div disabled class="btn m-1 disabled btn-success">已登入</div>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private string _currentEnvironment = string.Empty;

    private async Task OnAuthorizeClick(EventArgs e)
    {
        _stateContainer.IsGoogleLoggedIn = await _js.InvokeAsync<bool>("handleAuthClick", e);

    // await Task.Delay(3000);
    // await GetGoogleSignInStatus();
    }

    private async Task OnSignOutClick(EventArgs e)
    {
        _stateContainer.IsGoogleLoggedIn = await _js.InvokeAsync<bool>("handleSignoutClick", e);

    // await Task.Delay(3000);
    }

    protected override async Task OnInitializedAsync()
    {
        _stateContainer.OnChange += StateHasChanged;
        _currentEnvironment = GetEnvironment();
        await _js.InvokeVoidAsync("handleClientLoad");
        await Task.Delay(3000);
        await GetGoogleSignInStatus();
        await base.OnInitializedAsync();
    }

    private string GetEnvironment()
    {
        if (_hostEnvironment.IsProduction())
        {
            return "正式";
        }
        if (_hostEnvironment.IsEnvironment(StringConst.PreProduction))
        {
            return "測試";
        }
        return "開發";
    }

    [JSInvokable]
    public static Task<GoogleSheetsAuthModel> GetGoogleSheetsAuthConfig()
    {
        var result = StaticServiceCollectUtils.GetStaticService<GoogleSheetsAuthModel>();
        return Task.FromResult(result);
    }

    private async Task GetGoogleSignInStatus()
    {
        _stateContainer.IsGoogleLoggedIn = await _js.InvokeAsync<bool>("getSigninStatus");
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }
}